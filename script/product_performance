/* Analyze the yearly performance of products By comapring each product's sales to 
both its avg sales performance and previous year sales 
*/


WITH yearly_product_sales AS (
	SELECT
	YEAR(s.order_date) as order_year,
	p.product_name,
	SUM(s.sales) as current_sales
	FROM Gold.fact_sales s
	LEFT JOIN gold.dim_products p 
	on s.product_key = p.product_key
	WHERE YEAR(s.order_date) IS NOT NULL
	GROUP BY 
	YEAR(s.order_date), 
	p.product_name
)

SELECT
order_year,
product_name,
current_sales,
AVG(current_sales) OVER (PARTITION BY product_name) as avg_sales,
current_sales - AVG(current_sales) OVER (PARTITION BY product_name) as diff_avg,
CASE WHEN current_sales - AVG(current_sales) OVER (PARTITION BY product_name) > 0 THEN 'Above average'
		WHEN current_sales - AVG(current_sales) OVER (PARTITION BY product_name) < 0 THEN 'Below average'
		ELSE 'Avg'
END avg_change,
--Year-over-year Analysis
LAG(current_sales) OVER (PARTITION BY product_name ORDER BY order_year) AS py_sales,
current_sales -LAG(current_sales) OVER (PARTITION BY product_name ORDER BY order_year) AS diff_py,
CASE WHEN current_sales -LAG(current_sales) OVER (PARTITION BY product_name ORDER BY order_year) > 0 THEN 'Increase'
	WHEN current_sales -LAG(current_sales) OVER (PARTITION BY product_name ORDER BY order_year) < 0 THEN 'Decrease'
	ELSE 'No change'
END py_change
FROM yearly_product_sales
ORDER BY product_name, order_year
